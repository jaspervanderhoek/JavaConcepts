// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package java_library.actions;

import java.util.List;
import com.mendix.core.Core;
import com.mendix.core.objectmanagement.member.MendixObjectReference;
import com.mendix.core.objectmanagement.member.MendixObjectReferenceSet;
import com.mendix.logging.ILogNode;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixIdentifier;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.webui.CustomJavaAction;

public class IdentifyChanges extends CustomJavaAction<java.lang.Boolean>
{
	private IMendixObject ObjectToIdentify;

	public IdentifyChanges(IContext context, IMendixObject ObjectToIdentify)
	{
		super(context);
		this.ObjectToIdentify = ObjectToIdentify;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE

		boolean changed = false;

		for( IMendixObjectMember<?> member : this.ObjectToIdentify.getPrimitives(getContext()) ) {
			if ( member.isVirtual() || "createdDate".equals(member.getName()) || "changedDate".equals(member.getName()) )
				continue;

			switch (member.getState()) {
			case CHANGED:
				Object value = member.getValue(getContext()),
				oriValue = member.getOriginalValue(getContext());
				if ( oriValue != value &&
						(oriValue != null && !oriValue.equals(value)) &&
						(value != null && !value.equals(oriValue)) ) {
					changed = true;

					if ( this._logNode.isTraceEnabled() )
						this._logNode.trace("Member " + member.getName() + " has changed");
					break;
				}
				//$FALL-THROUGH$
			default:
				if ( this._logNode.isTraceEnabled() )
					this._logNode.trace("Member " + member.getName() + " has not changed");
				break;
			}

			// No need to check other fields when we know it has changed
			if ( changed )
				break;
		}

		// Only if there are no changes we want to evaluate the rest of the object
		if ( !changed ) {
			for( MendixObjectReference reference : this.ObjectToIdentify.getReferences(getContext()) ) {

				if ( reference.getName().startsWith("System.") )
					continue;

				switch (reference.getState()) {
				case CHANGED:
					IMendixIdentifier value = reference.getValue(getContext()),
					oriValue = reference.getOriginalValue(getContext());

					if ( oriValue != value
							|| (oriValue != null && value != null && !(oriValue).equals(value)) ) {
						changed = true;

						if ( this._logNode.isTraceEnabled() )
							this._logNode.trace("Reference " + reference.getName() + " has changed");
						break;
					}
					//$FALL-THROUGH$
				default:
					if ( this._logNode.isTraceEnabled() )
						this._logNode.trace("Reference " + reference.getName() + " has not changed");

					break;
				}

				// No need to check other fields when we know it has changed
				if ( changed )
					break;
			}
		}


		// Only if there are no changes we want to evaluate the rest of the object
		if ( !changed ) {
			for( MendixObjectReferenceSet referenceSet : this.ObjectToIdentify.getReferenceSets(getContext()) ) {
				switch (referenceSet.getState()) {
				case CHANGED:
					List<IMendixIdentifier> value = referenceSet.getValue(getContext()),
					oriValue = referenceSet.getOriginalValue(getContext());

					if ( !oriValue.containsAll(value) || !value.containsAll(oriValue) ) {
						changed = true;
						if ( this._logNode.isTraceEnabled() )
							this._logNode.trace("Reference " + referenceSet.getName() + " has changed");
						break;
					}
					//$FALL-THROUGH$
				default:
					if ( this._logNode.isTraceEnabled() )
						this._logNode.trace("Reference " + referenceSet.getName() + " has not changed");
					break;
				}


				// No need to check other fields when we know it has changed
				if ( changed )
					break;
			}

		}

		return changed;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "IdentifyChanges";
	}

	// BEGIN EXTRA CODE
	private ILogNode _logNode = Core.getLogger(this.toString());
	// END EXTRA CODE
}
