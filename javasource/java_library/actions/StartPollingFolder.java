// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package java_library.actions;

import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;
import org.sadun.util.polling.BasePollManager;
import org.sadun.util.polling.DirectoryPoller;
import org.sadun.util.polling.FileFoundEvent;
import system.proxies.FileDocument;
import com.mendix.core.Core;
import com.mendix.core.CoreException;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IDataType;
import com.mendix.systemwideinterfaces.core.IDataType.DataTypeEnum;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.webui.CustomJavaAction;

public class StartPollingFolder extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String StringFolder;
	private java.lang.String MicroflowName;

	public StartPollingFolder(IContext context, java.lang.String StringFolder, java.lang.String MicroflowName)
	{
		super(context);
		this.StringFolder = StringFolder;
		this.MicroflowName = MicroflowName;
	}

	@java.lang.Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		
		File pollFolder = new File(this.StringFolder);
		if( !pollFolder.exists() )
			throw new CoreException("The folder: " + this.StringFolder + " does not exists");
		if( !pollFolder.canRead() )
			throw new CoreException("The folder: " + this.StringFolder + " can not be read");
		
		DirectoryPoller poller = new DirectoryPoller( pollFolder );
		poller.setPollInterval(1000);
		poller.setBypassLockedFiles(true);
		
		try {
			poller.setFilesSortComparator( new DirectoryPoller.ModificationTimeComparator(true) ); 
			/*poller.setFilesSortComparator(
			new DirectoryPoller.FileSizeComparator(true));*/
			poller.setAutoMove(false);
		} catch (Exception exception) {
			Core.getLogger(this.toString()).error(exception);
		}
		
		FPM pollManager = new FPM(this.StringFolder, this.MicroflowName);
		poller.addPollManager(pollManager);
		poller.setSendSingleFileEvent(true);
		
		try {
			poller.start();
		}catch (Exception exception) {
			Core.getLogger(this.toString()).error(exception);
		}
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "StartPollingFolder";
	}

	// BEGIN EXTRA CODE
	
public class FPM extends BasePollManager {
	private File directory;
	private String microflowName;
	public FPM ( String folder, String microflowName ) {
		this.directory = new File( folder );
		this.microflowName = microflowName;
	}
	
	public synchronized void fileFound(FileFoundEvent fileEvent) {
		File foundFile = fileEvent.getFile();
		try {
			System.out.println("moving - " + foundFile.getAbsolutePath());
			FileInputStream fis = new FileInputStream(foundFile);
			IMendixObject mxFileObject = Core.instantiate(Core.createSystemContext(), FileDocument.getType());
			Core.storeFileDocumentContent(Core.createSystemContext(), mxFileObject, foundFile.getName(), fis);
			
			HashMap<String, Object> paramMap = new HashMap<String, Object>();
			Map<String, IDataType> params = Core.getInputParameters(this.microflowName);
			for( Entry<String, IDataType> entry : params.entrySet() ) {
				if( entry.getValue().getType() == DataTypeEnum.Object ) {
					String objType = entry.getValue().getObjectType();
					if( FileDocument.entityName.equals(objType) || Core.isSubClassOf(FileDocument.entityName, objType) ) {
						paramMap.put(entry.getKey(), mxFileObject);
					}
				}
			}
			Core.execute(Core.createSystemContext(), this.microflowName, paramMap);
			
			Thread.sleep(1);
		} catch (IOException e) {
			Core.getLogger(this.toString()).error(e);
		} catch (CoreException e) {
			Core.getLogger(this.toString()).error(e);
		} catch (InterruptedException e) {
			Core.getLogger(this.toString()).error(e);
		}
	}
}
	
	// END EXTRA CODE
}
