// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package java_library.actions;

import java.util.ArrayList;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObject;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.systemwideinterfaces.core.meta.IMetaObject;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive;
import com.mendix.systemwideinterfaces.core.meta.IMetaPrimitive.PrimitiveType;
import com.mendix.webui.CustomJavaAction;

/**
 * Based on attribute names compare if we can copy all values from comparableObject into TargetObject. 
 * If not a validation message is returned
 */
public class CompareFieldLengths extends CustomJavaAction<java.lang.String>
{
	private IMendixObject ComparableObject;
	private java.lang.String TargetObjectType;

	public CompareFieldLengths(IContext context, IMendixObject ComparableObject, java.lang.String TargetObjectType)
	{
		super(context);
		this.ComparableObject = ComparableObject;
		this.TargetObjectType = TargetObjectType;
	}

	@java.lang.Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		ArrayList<IMendixObject> returnList = new ArrayList<IMendixObject>();
		
		IMetaObject obj = Core.getMetaObject(this.TargetObjectType);
		String validationMessage = "";
		
		for( IMetaPrimitive primitive : obj.getMetaPrimitives() ) {
			if(  this.ComparableObject.hasMember(primitive.getName()) ) {
				IMendixObjectMember<?> member = this.ComparableObject.getMember(getContext(), primitive.getName());
				if( primitive.getType() == PrimitiveType.String ) {
					int length = primitive.getLength();
					String value = String.valueOf( member.getValue(getContext()) );
					if( value.length() > length ) { 
						
						validationMessage += "The value of field: " + primitive.getName() + " is longer than allowed. The lenght is: " + value.length() + " but the field has a maximum of: " + length + "\r\n";
					}
				}
			}
			
		}
		
		
		return validationMessage;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "CompareFieldLengths";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
