// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package loginexample.actions;

import loginexample.CustomLoginAction;
import loginexample.CustomLoginActionListener;
import com.mendix.core.Core;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class StartCustomLogin extends CustomJavaAction<java.lang.Boolean>
{
	public StartCustomLogin(IContext context)
	{
		super(context);
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE
		CustomLoginActionListener listener = new CustomLoginActionListener();
		listener.addReplaceEvent(CustomLoginAction.class.getName());
		Core.addListener(listener);
		
		return true;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "StartCustomLogin";
	}

	// BEGIN EXTRA CODE
	
	/*public class CustomLoginActionListener extends UserActionListener<LoginAction> {

		public CustomLoginActionListener() {
			super(LoginAction.class);
		}

		*//**
		 * This action validates if the custom login action should be executed, when the result is true
		 * the custom login action will be executed
		 *//*
		@Override
		public boolean check(LoginAction action) {
			if (action == null)
				throw new IllegalArgumentException("Action should not be null");
			
			return true;
		}
		
	}*/
	
	
	/*public class CustomLoginAction extends UserAction<ISession> {
		private final String username;
		private final String password;

		//These parameters should all be present in the params hashmap.
		public final static String SESSION_MANAGER_PARAM = "sessionManager";
		public final static String USER_NAME_PARAM = "userName";
		public final static String PASSWORD_PARAM = "password";
		public final static String LOCALE_PARAM = "locale";
		public final static String CURRENT_SESSION_ID_PARAM = "currentSessionId";
		
		private ReentrantLock lock = new ReentrantLock();

        public CustomLoginAction(IContext iContext, Map<String, ? extends Object> params) {
            super(iContext);
            this.username = (String) params.get(USER_NAME_PARAM);
			this.password = (String) params.get(PASSWORD_PARAM);
		}

		@Override
		public ISession executeAction() throws Exception {
			try {
				if (this.username == null || this.username.isEmpty() || this.password == null || this.password.isEmpty())
					throw new AuthenticationRuntimeException("CustomLogin FAILED: empty usernames or passwords are not allowed: " + this.username);
			
				IContext context = Core.createSystemContext();
				Boolean loginAllowed = false;
				*//*
				 * TODO Implement the custom login action, with a microflow call, webservice,etc..  
				 *//*
				HashMap<String, Object> mfParameters = new HashMap<String, Object>();
				mfParameters.put("username", this.username);
				mfParameters.put("password", this.password);
				loginAllowed = Core.execute(context, "VWAN_NSM.WebServices.Login.Login", mfParameters);
				
				
				if( loginAllowed != null && loginAllowed == true ) {
					ISession session = null;
					IUser user = Core.getUser(context, this.username);
					@SuppressWarnings("unchecked")
					List<IMendixIdentifier> roles = ((List<IMendixIdentifier>) user.getMendixObject().getValue(context, User.MemberNames.UserRoles.toString()));
					
					if ( (Boolean) user.getMendixObject().getValue(context, User.MemberNames.Active.toString()) && 
						 !(Boolean) user.getMendixObject().getValue(context, User.MemberNames.Blocked.toString()) && 
						 ( roles != null && roles.size() > 0) ) {
						this.lock.lock();
						try {
							session = Core.initializeSession(context, user, null, null);
						}
						finally {
							this.lock.unlock();
						}
					}
					else
						throw new AuthenticationRuntimeException("CustomLogin FAILED: user " + this.username + " is inactive or blocked or has no userroles");

					if (session == null)
						throw new AuthenticationRuntimeException("CustomLogin FAILED: unable to initialize the session for user " + this.username);
					
					return session;
				}

				throw new AuthenticationRuntimeException("CustomLogin FAILED for user " + this.username);
			}
			catch (AuthenticationRuntimeException e) {
				throw e;
			}
			catch (Exception e) {
				// If the number of sessions has exceeded we just want to rethrow the original exception
				if (e.getMessage() != null && e.getMessage().contains("sessions exceeded")) 
					throw e;
				throw new AuthenticationRuntimeException("CustomLogin FAILED: error while checking login: " + e.getMessage());
			}
		}

		@Override
		public String toString() {
			return "[CustomLoginAction:: username: " + this.username + " password: " + "]";
		}

	}*/
	
	// END EXTRA CODE
}
