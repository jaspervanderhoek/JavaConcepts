// This file was generated by Mendix Studio Pro.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package java_library.actions;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Map.Entry;
import java.util.UUID;
import java.util.zip.ZipEntry;
import java.util.zip.ZipInputStream;
import java.util.zip.ZipOutputStream;
import system.proxies.FileDocument;
import com.mendix.core.Core;
import com.mendix.core.objectmanagement.member.MendixAutoNumber;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.systemwideinterfaces.core.IMendixObjectMember;
import com.mendix.webui.CustomJavaAction;
import com.mendix.systemwideinterfaces.core.IMendixObject;

public class ExtractZipfile extends CustomJavaAction<java.util.List<IMendixObject>>
{
	private IMendixObject __ImportZipFile;
	private system.proxies.FileDocument ImportZipFile;

	public ExtractZipfile(IContext context, IMendixObject ImportZipFile)
	{
		super(context);
		this.__ImportZipFile = ImportZipFile;
	}

	@java.lang.Override
	public java.util.List<IMendixObject> executeAction() throws Exception
	{
		this.ImportZipFile = this.__ImportZipFile == null ? null : system.proxies.FileDocument.initialize(getContext(), __ImportZipFile);

		// BEGIN USER CODE
		ArrayList<IMendixObject> ouputList = new ArrayList<IMendixObject>();
		
		try {
			// Create the ZIP file
			ZipInputStream zis = new ZipInputStream(Core.getFileDocumentContent(getContext(), this.__ImportZipFile));


			// get the zipped file list entry
			ZipEntry ze = zis.getNextEntry();

			while( ze != null ) {

				IMendixObject zippedFile = Core.instantiate(getContext(), this.__ImportZipFile.getType());
				for( Entry<String, ? extends IMendixObjectMember<?>> memberEntry : this.__ImportZipFile.getMembers(getContext()).entrySet() ) {
					IMendixObjectMember<?> member = memberEntry.getValue();
					if ( !member.isVirtual() && 
						 !(member instanceof MendixAutoNumber) && 
						 !"createdDate".equals(memberEntry.getKey()) && 
						 !"changedDate".equals(memberEntry.getKey()) && 
						 !"System.owner".equals(memberEntry.getKey()) && 
						 !"System.changedBy".equals(memberEntry.getKey()) && 
						 member.hasWriteAccess(getContext()) )
						zippedFile.setValue(getContext(), memberEntry.getKey(), member.getValue(getContext()));
				}

				zippedFile.setValue(getContext(), FileDocument.MemberNames.Name.toString(), ze.getName());

				ByteArrayOutputStream baos = new ByteArrayOutputStream();

				// Fake code simulating the copy
				// You can generally do better with nio if you need...
				// And please, unlike me, do something about the Exceptions :D
				byte[] buffer = new byte[1024];
				int len;
				while ((len = zis.read(buffer)) > -1 ) {
				    baos.write(buffer, 0, len);
				}
				baos.flush();

				// Open new InputStreams using the recorded bytes
				// Can be repeated as many times as you wish
				InputStream is1 = new ByteArrayInputStream(baos.toByteArray());
				Core.storeFileDocumentContent(getContext(), zippedFile, ze.getName(), is1);

				ouputList.add(zippedFile);

				ze = zis.getNextEntry();
			}
			zis.closeEntry();
			zis.close();

		}
		catch( IOException e ) {
			Core.getLogger(this.toString()).error(e);
			return ouputList;
		}

		return ouputList;
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 * @return a string representation of this action
	 */
	@java.lang.Override
	public java.lang.String toString()
	{
		return "ExtractZipfile";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
