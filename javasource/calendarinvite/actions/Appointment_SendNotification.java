// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package calendarinvite.actions;

import java.util.Properties;
import javax.activation.MailcapCommandMap;
import javax.activation.MimetypesFileTypeMap;
import javax.mail.Address;
import javax.mail.Authenticator;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.NoSuchProviderException;
import javax.mail.PasswordAuthentication;
import javax.mail.Session;
import javax.mail.Transport;
import javax.mail.internet.InternetAddress;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMessage;
import javax.mail.internet.MimeMultipart;
import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

public class Appointment_SendNotification extends CustomJavaAction<java.lang.Boolean>
{
	private java.lang.String SMPTHostName;
	private java.lang.Long SMTPPortNr;
	private java.lang.String SMTPUsername;
	private java.lang.String SMTPPassword;
	private java.lang.Boolean SMTPUseTLS;
	private java.lang.Boolean SMTPUseSSL;
	private java.lang.String SenderEmailAddress;
	private java.lang.String RecipientEmailAddress;
	private java.lang.String CCEmailAddress;
	private java.lang.String Subject;
	private java.lang.String BodyText;
	private java.lang.String Location;
	private java.lang.String iCalText;

	public Appointment_SendNotification(IContext context, java.lang.String SMPTHostName, java.lang.Long SMTPPortNr, java.lang.String SMTPUsername, java.lang.String SMTPPassword, java.lang.Boolean SMTPUseTLS, java.lang.Boolean SMTPUseSSL, java.lang.String SenderEmailAddress, java.lang.String RecipientEmailAddress, java.lang.String CCEmailAddress, java.lang.String Subject, java.lang.String BodyText, java.lang.String Location, java.lang.String iCalText)
	{
		super(context);
		this.SMPTHostName = SMPTHostName;
		this.SMTPPortNr = SMTPPortNr;
		this.SMTPUsername = SMTPUsername;
		this.SMTPPassword = SMTPPassword;
		this.SMTPUseTLS = SMTPUseTLS;
		this.SMTPUseSSL = SMTPUseSSL;
		this.SenderEmailAddress = SenderEmailAddress;
		this.RecipientEmailAddress = RecipientEmailAddress;
		this.CCEmailAddress = CCEmailAddress;
		this.Subject = Subject;
		this.BodyText = BodyText;
		this.Location = Location;
		this.iCalText = iCalText;
	}

	@Override
	public java.lang.Boolean executeAction() throws Exception
	{
		// BEGIN USER CODE

		// register the text/calendar mime type
		MimetypesFileTypeMap mimetypes = (MimetypesFileTypeMap) MimetypesFileTypeMap.getDefaultFileTypeMap();
		mimetypes.addMimeTypes("text/calendar ics ICS");

		// register the handling of text/calendar mime type
		MailcapCommandMap mailcap = (MailcapCommandMap) MailcapCommandMap.getDefaultCommandMap();
		mailcap.addMailcap("text/calendar;; x-java-content-handler=com.sun.mail.handlers.text_plain");

		Session session = getSession();
		MimeMessage message = new MimeMessage(session);
		message.addHeaderLine("method=REQUEST");
		message.addHeaderLine("charset=UTF-8");
		message.addHeaderLine("component=VEVENT");

		message.setFrom(new InternetAddress(this.SenderEmailAddress));
		message.setSubject(this.Subject);

		for( String mail : getAttendees(this.RecipientEmailAddress) ) {
			Address address = new InternetAddress(mail);
			message.addRecipient(Message.RecipientType.TO, address);
		}

		for( String mail : getAttendees(this.CCEmailAddress) ) {
			Address address = new InternetAddress(mail);
			message.addRecipient(Message.RecipientType.TO, address);
		}

		message.setSubject(this.Subject);
		message.setContent(createMessageContent());

		connectAndSendMessage(session, message);

		return true;

		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "Appointment_SendNotification";
	}

	// BEGIN EXTRA CODE


	private Multipart createMessageContent() throws MessagingException {
		// The container we are going to stick into the message, that message will be sent
		Multipart multipart = new MimeMultipart();

		// Add the invite as a body part
		BodyPart calendarBody = new MimeBodyPart();
		calendarBody.setHeader("Content-Class", "urn:content-classes:calendarmessage");
		calendarBody.setHeader("Content-ID", "calendar_message");
		calendarBody.setContent(this.iCalText, "text/calendar");
		multipart.addBodyPart(calendarBody);

		// Add the html message as a body part
		MimeBodyPart descriptionPart = new MimeBodyPart();
		descriptionPart.setContent(this.BodyText, "text/html; charset=utf-8");
		multipart.addBodyPart(descriptionPart);
		return multipart;
	}

	private Session getSession() {
		String smtpHost = this.SMPTHostName == null ? "" : this.SMPTHostName;
		int smtpPort = this.SMTPPortNr.intValue() <= 0 ? 25 : this.SMTPPortNr.intValue();
		Properties properties = new Properties();

		properties.put("mail.smtp.starttls.enable", (this.SMTPUseTLS));
		properties.put("mail.smtp.host", smtpHost);
		properties.put("mail.smtp.port", Integer.toString(smtpPort));

		if ( this.SMTPUsername != null && !this.SMTPUsername.isEmpty() ) {
			properties.put("mail.smtp.auth", true);
			properties.put("mail.smtp.user", this.SMTPUsername);
			properties.put("mail.smtp.password", this.SMTPPassword);
		}
		else
			properties.put("mail.smtp.auth", false);

		SmtpAuthenticator authentication = new SmtpAuthenticator(this.SMTPUsername, this.SMTPPassword);
		return Session.getDefaultInstance(properties, authentication);
	}

	private void connectAndSendMessage( Session session, MimeMessage message ) throws NoSuchProviderException, MessagingException {
		// Lets get this shit on the road!
		Transport transport;
		if ( this.SMTPUseSSL )
			transport = session.getTransport("smtps");
		else
			transport = session.getTransport("smtp");


		transport.connect();
		Thread.currentThread().setContextClassLoader(getClass().getClassLoader());
		transport.sendMessage(message, message.getAllRecipients());
		transport.close();
	}

	private static String[] getAttendees( String emailList ) {
		String[] attendees = null;
		if ( attendees == null ) {
			attendees = emailList.split("[,;]");

			for( int i = 0; i < attendees.length; i++ ) {
				attendees[i] = attendees[i].trim();
			}
		}

		return attendees;
	}


	public class SmtpAuthenticator extends Authenticator {

		String username;
		String password;

		public SmtpAuthenticator( String username, String password ) {
			super();
			this.username = username;
			this.password = password;
		}

		@Override
		public PasswordAuthentication getPasswordAuthentication() {
			if ( (this.username != null) && (this.username.length() > 0) && (this.password != null) && (this.password.length() > 0) ) {

				return new PasswordAuthentication(this.username, this.password);
			}

			return null;
		}
	}

	// END EXTRA CODE
}
